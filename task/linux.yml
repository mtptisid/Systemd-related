---
# tasks file for Linux OS in add_cagip_prod_systemd_service
#
# Use these conditions if there are specificities between Linux distributions
# when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '6'
# when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7'
# when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
# when: ansible_distribution == 'Debian' and ansible_distribution_major_version == '6'

- name: Ensure that the target OS is RHEL7 or later
  assert:
    that:
      - ansible_distribution == 'RedHat'
      - ansible_distribution_major_version | int >= 7
    msg: "OS version should be RHEL7 or later"
  tags:
    - always
    - checks

- name: Check if we have mandatory vars
  assert:
    that:
      - ServiceName | quote is defined and ServiceName | quote != ""
      - ExecStart is defined and ExecStart != ""
    msg: "Please provide the following mandatory vars : ServiceName | quote, ExecStar"
  tags:
    - always
    - checks

- name: Create a local usr systemd directory if it doesn't exist
  file:
    path: /usr/local/lib/systemd/system/
    state: directory
    mode: 0755
  become: true
  tags:
    - create_systemd_dir

- name: Installing the service
  block:
    - name: Install the service
      template:
        src: template.service.j2
        dest: "/usr/local/lib/systemd/system/{{ ServiceName | quote }}.service"
        owner: root
        group: root
        mode: 0644
      become: true
      notify:
        - Reload systemd
    - meta: flush_handlers
    - name: Enable the service
      systemd:
        name: "{{ ServiceName | quote }}.service"
        enabled: yes
      become: true
  tags:
    - install_service

- name: Start the {{ ServiceName | quote }} service if triggered
  systemd:
    name: "{{ ServiceName | quote }}.service"
    state: restarted
  become: true
  when: do_start == 'yes'
  tags:
    - start_service

# The sudo will be generated only if the conditions below are true:
# - the build_user (calling Jenkins build) is the mid jenkins account
# - the service is configured with the "User" directive and does match a mid service account
# - the service name does match the regex defined for mid service
# Note: The technical account (i.e defined with the var User=) is the only account configured to run sudo cmd on the systemctl service
#- name: Add sudo rights for technical account if allowed
#  include_tasks: add_systemctl_sudo_rights.yml
# when:
 #   #- build_user | lower in sudo_allowed_users.keys()
 #   - User is defined and User | regex_search('^(httpd|jboss|php|tomcat|was|wildfly)c\d{3}')
  #  - ServiceName is defined and ServiceName | regex_search('^slc\d{3}\S{2}[porhqid][\w]+')




